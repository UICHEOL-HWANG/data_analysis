{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "93742dd5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# bestseller_scraper.py\n",
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "import time\n",
    "import pandas as pd\n",
    "\n",
    "def extract_bookinfo(yy, mon, book_list):\n",
    "    bookList = []\n",
    "    for book in book_list:\n",
    "        book_dict = {}\n",
    "        title = book.select_one(\".gd_name\").text\n",
    "        if book.select(\".gd_nameE\"):\n",
    "            subtitle = book.select_one(\".gd_nameE\").text\n",
    "        elif book.select(\".gd_nameF\"):\n",
    "            subtitle = book.select_one(\".gd_nameF\").text\n",
    "        else:\n",
    "            subtitle = None\n",
    "        link = \"https://www.yes24.com/\"+book.select_one(\".gd_name\")['href'].strip()\n",
    "        author = [i.get_text().strip() for i in book.select_one(\".authPub.info_auth > a\")] if book.select_one(\".authPub.info_auth > a\") is not None else \"None\"\n",
    "        publisher = book.select_one(\".authPub.info_pub > a\").text.strip() if book.select_one(\".authPub.info_pub > a\") is not None else \"None\"\n",
    "        publish_date = book.select_one(\".authPub.info_date\").text.strip() if book.select_one(\".authPub.info_date\") is not None else \"None\"\n",
    "        price = book.select_one(\".txt_num .yes_b\").text.strip() + \"원\" if book.select_one(\".txt_num .yes_b\") is not None else 0\n",
    "        review = book.select_one(\".rating_rvCount .txC_blue\").text.strip() if book.select_one(\".rating_rvCount .txC_blue\") is not None else 0\n",
    "        review_link = book.select_one(\".rating_rvCount > a\")['href'].strip() if book.select_one(\".rating_rvCount > a\") is not None else \"None\"\n",
    "        star_pont = book.select_one(\".rating_grade .yes_b\").text.strip() if book.select_one(\".rating_grade .yes_b\") is not None else 0\n",
    "        tag = [i.get_text().strip() for i in book.select(\".info_row.info_tag > .tag > a\")] if book.select(\".info_row.info_tag > .tag > a\") is not None else \"None\"\n",
    "\n",
    "        book_dict[\"년\"] = yy\n",
    "        book_dict[\"월\"] = mon\n",
    "        book_dict[\"제목\"] = title\n",
    "        book_dict[\"부제목\"] = subtitle\n",
    "        book_dict[\"링크\"] = link\n",
    "        book_dict[\"작가\"] = author\n",
    "        book_dict[\"출판사\"] = publisher\n",
    "        book_dict[\"출판일\"] = publish_date\n",
    "        book_dict[\"가격\"] = price\n",
    "        book_dict[\"리뷰\"] = review\n",
    "        book_dict[\"리뷰링크\"] = review_link\n",
    "        book_dict[\"별점\"] = star_pont\n",
    "        book_dict[\"태그\"] = tag\n",
    "\n",
    "        bookList.append(book_dict)\n",
    "    return bookList\n",
    "\n",
    "def detail_page_info(urls):\n",
    "    detail_result = []\n",
    "    for index, url in enumerate(urls):\n",
    "        detail_dict = {}\n",
    "        print(f\"{index}/{len(urls)} 데이터 추출 중\")\n",
    "        r = requests.get(url)\n",
    "        soup = BeautifulSoup(r.text, 'lxml')\n",
    "        book_id = url.split(\"/\")[-1]\n",
    "        if soup.select_one(\"div.infoSetCont_wrap tr:nth-child(2) > td\") is not None:\n",
    "            if \"쪽수\" in soup.select_one(\"div.infoSetCont_wrap tr:nth-child(2) > th\").text:\n",
    "                if len(soup.select_one(\"div.infoSetCont_wrap tr:nth-child(2) > td\").text.split(\"|\")) == 3:\n",
    "                    page, weight, size = soup.select_one(\"div.infoSetCont_wrap tr:nth-child(2) > td\").text.split(\"|\")\n",
    "                elif len(soup.select_one(\"div.infoSetCont_wrap tr:nth-child(2) > td\").text.split(\"|\")) == 2 and \\\n",
    "                        soup.select_one(\"div.infoSetCont_wrap tr:nth-child(2) > td\").text.split(\"|\")[1][-2:] == \"mm\":\n",
    "                    page, size = soup.select_one(\"div.infoSetCont_wrap tr:nth-child(2) > td\").text.split(\"|\")\n",
    "                    weight = 0\n",
    "            elif \"쪽수\" in soup.select_one(\"div.infoSetCont_wrap tr:nth-child(3) > th\").text:\n",
    "                if len(soup.select_one(\"div.infoSetCont_wrap tr:nth-child(3) > td\").text.split(\"|\")) == 3:\n",
    "                    page, weight, size = soup.select_one(\"div.infoSetCont_wrap tr:nth-child(3) > td\").text.split(\"|\")\n",
    "                elif len(soup.select_one(\"div.infoSetCont_wrap tr:nth-child(3) > td\").text.split(\"|\")) == 2 and \\\n",
    "                        soup.select_one(\"div.infoSetCont_wrap tr:nth-child(3) > td\").text.split(\"|\")[1][-2:] == \"mm\":\n",
    "                    page, size = soup.select_one(\"div.infoSetCont_wrap tr:nth-child(3) > td\").text.split(\"|\")\n",
    "                    weight = 0\n",
    "            elif \"쪽수\" in soup.select_one(\"div.infoSetCont_wrap tr:nth-child(4) > th\").text:\n",
    "                if len(soup.select_one(\"div.infoSetCont_wrap tr:nth-child(4) > td\").text.split(\"|\")) == 3:\n",
    "                    page, weight, size = soup.select_one(\"div.infoSetCont_wrap tr:nth-child(4) > td\").text.split(\"|\")\n",
    "                elif len(soup.select_one(\"div.infoSetCont_wrap tr:nth-child(4) > td\").text.split(\"|\")) ==\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "myvenv",
   "language": "python",
   "name": "myvenv"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.17"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
